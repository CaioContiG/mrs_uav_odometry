#!/usr/bin/env python

PACKAGE='mrs_odometry'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();
params = gen.add_group("Covariances");

params.add("Q_pos_mavros", double_t, 1, "Q (Mavros position)", 1, 0.00001, 100000000);
params.add("Q_pos_vio", double_t, 2, "Q (vio position)", 1, 0.00001, 100000000);
params.add("Q_pos_icp", double_t, 4, "Q (ICP position)", 1, 0.00001, 100000000);
params.add("Q_pos_rtk", double_t, 8, "Q (RTK position)", 1, 0.00001, 100000000);
params.add("Q_pos_brick", double_t, 16, "Q (BRICK position)", 1, 0.00001, 100000000);
params.add("Q_pos_hector", double_t, 16, "Q (BRICK position)", 1, 0.00001, 100000000);

params.add("Q_vel_mavros", double_t, 32, "Q (Mavros velocity)", 1, 0.00001, 100000000);
params.add("Q_vel_vio", double_t, 64, "Q (vio velocity)", 1, 0.00001, 100000000);
params.add("Q_vel_icp", double_t, 128, "Q (ICP velocity)", 1, 0.00001, 100000000);
params.add("Q_vel_optflow", double_t, 256, "Q (Optflow velocity)", 1, 0.00001, 100000000);
params.add("Q_vel_rtk", double_t, 256, "Q (RTK velocity)", 1, 0.00001, 100000000);

params.add("Q_tilt", double_t, 256, "Q (tilt)", 1, 0.00001, 100000000);

params.add("R_pos", double_t, 512, "R (pose)", 1, 0.00001, 100000000);
params.add("R_vel", double_t, 512, "R (vel)", 1, 0.00001, 100000000);
params.add("R_acc", double_t, 1024, "R (acc)", 1, 0.00001, 100000000);
params.add("R_acc_d", double_t, 1024, "R (acc_d)", 1, 0.00001, 100000000);
params.add("R_acc_i", double_t, 1024, "R (acc_i)", 1, 0.00001, 100000000);
params.add("R_tilt", double_t, 2048, "R (tilt)", 1, 0.00001, 100000000);

params.add("Q_height_range", double_t, 8192, "Q (rangefinder height)", 1, 0.00001, 100000000);
params.add("Q_vel_baro", double_t, 8192, "Q (z barometric velocity)", 1, 0.00001, 100000000);
params.add("Q_acc_imu", double_t, 16384, "Q (imu accelerations)", 1, 0.00001, 100000000);

params.add("Q_yaw_compass", double_t, 4096, "Q (compass yaw)", 1, 0.00001, 100000000);
params.add("Q_yaw_hector", double_t, 4096, "Q (hector yaw)", 1, 0.00001, 100000000);
params.add("Q_yaw_brick", double_t, 4096, "Q (brick yaw)", 1, 0.00001, 100000000);
params.add("Q_rate_gyro", double_t, 8192, "Q (gyro rate)", 1, 0.00001, 100000000);
params.add("Q_rate_optflow", double_t, 8192, "Q (optflow rate)", 1, 0.00001, 100000000);

exit(gen.generate(PACKAGE, "mrs_odometry", "lkf"))



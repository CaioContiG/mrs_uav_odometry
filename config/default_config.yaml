# Estimators used during takeoff
# Lateral state estimator:
# OPTFLOW, GPS, OPTFLOWGPS, RTK, LIDAR, VIO, VSLAM,  HECTOR
lateral_estimator: "GPS"

# Altitude state estimator:
# HEIGHT - rangefinder, PLANE - height above plane estimated from realsense, BRICK - height above BRICK
altitude_estimator: "HEIGHT"

# Heading state estimator:
# GYRO - gyro, COMPASS - gyro, compass, OPTFLOW - gyro, optflow, HECTOR - gyro, hector slam
heading_estimator: "PIXHAWK" 

# Active estimators are started at node launch and can be switched to during flight
state_estimators:
  active: ["OPTFLOW", "GPS", "RTK", "VIO", "VSLAM", "BRICK", "BRICKFLOW", "HECTOR", "LIDAR", "ICP", "ALOAM"]

heading_estimators:
  active: ["PIXHAWK", "GYRO", "COMPASS", "OPTFLOW", "HECTOR", "LIDAR", "BRICK", "VIO", "VSLAM", "ICP", "BRICKFLOW", "ALOAM"]

# Available localization methods
gps_available: true
optflow_available: true
vio_available: true
rtk_available: true
lidar_available: true
aloam_available: false
brick_available: true
t265_available: false
vslam_available: true

# Rates of odometry publishers
rate: 100 # [Hz]
aux_rate: 100 # [Hz]
slow_odom_rate: 2 # [Hz]
diag_rate: 10 # [Hz]
max_altitude_rate: 10 # [Hz]
lkf_states_rate: 10 # [Hz]

min_satellites: 0
max_default_altitude: 30.0
max_optflow_altitude: 10.0
max_brick_altitude: 3.0 # over 2 meters starts to oscillate, but MPC can handle it
max_plane_altitude: 4.0 # over 2 meters starts to oscillate, but MPC can handle it
april_objects: false

publish_fused_odom: true # otherwise publish pixhawk odometry instead
publish_local_origin_stable_tf: true 
publish_pixhawk_velocity: false # pixhawk velocity instead of estimated velocity - sometimes works better
publish_local_origin_stable_tf: false
pass_rtk_as_odom: false # dangerous outside simulation!
max_altitude_correction: 0.001 # [m]
use_optflow_low: false # use optimized optflow for takeoff and landing

trg_z_offset: 0.035 # [m]
garmin_z_offset: -0.03 # [m]
sonar_z_offset: 0.0 # [m]
# mobius_z_offset: 0.06 # [m]
fcu_height: 0.2 # [m]

trgFilterBufferSize: 100
trgFilterMaxValidAltitude: 8.0
trgFilterMaxDifference: 3.0

garminFilterBufferSize: 200
garminFilterMaxValidAltitude: 40.0
garminFilterMaxDifference: 2.0

sonarFilterBufferSize: 200
sonarFilterMaxValidAltitude: 40.0
sonarFilterMaxDifference: 2.0

planeFilterBufferSize: 200
planeFilterMaxValidAltitude: 40.0
planeFilterMaxDifference: 2.0

brickFilterBufferSize: 200
brickFilterMaxValidAltitude: 40.0
brickFilterMaxDifference: 4.0

vioFilterBufferSize: 200
vioFilterMaxValidAltitude: 40.0
vioFilterMaxDifference: 2.0

aloamHeightFilterBufferSize: 200
aloamHeightFilterMaxValidAltitude: 40.0
aloamHeightFilterMaxDifference: 2.0

reset_hector_after_takeoff: false # Gets rid of map clutter accumulated during takeoff tilting

perform_hector_reset_routine: false # Switches to ICP or OPTFLOW, stores offset, resets map, switches back to HECTOR

null_tracker: "NullTracker"

altitude:

  # do not fuse rangefinder measurements when the UAV is tilted more than this angle
  excessive_tilt: 0.5 # ~pi/6 [rad]

  # Altitude Kalman filter parameters
  numberOfVariables: 3
  numberOfInputs: 1
  numberOfMeasurements: 1

  # The input matrix
  B: [0,
      0,
      0.1]

  # Process covariance
  R: [1, 1, 0,
      0, 1, 0,
      0, 0, 10]

  # Covariances of measurements
  Q:
    height_range: [1000] # 0.04 stddev in simulation
    height_sonar: [1]
    height_plane: [100] 
    height_brick: [100] 
    height_vio: [1] 
    height_aloam: [1] 
    height_baro: [1] 
    # vel_baro: [100] # for difference
    vel_baro: [0.1] # for twist
    acc_imu: [100] 

lateral:

  numberOfVariables: 6
  numberOfInputs: 1
  numberOfMeasurements: 1

  saturate_mavros_position: false
  max_mavros_pos_correction: 0.5
  max_vio_pos_correction: 0.5
  max_object_pos_correction: 0.5
  max_brick_pos_correction: 1.0
  max_rtk_pos_correction: 0.5
  max_vslam_pos_correction: 0.2
  max_t265_vel: 10.0
  rtk_fuse_sps: true

  dynamic_optflow_cov: false
  dynamic_optflow_cov_scale: 1

  optflow_median_filter: true
  optflow_filter_buffer_size: 10
  optflow_filter_max_valid: 5.0
  optflow_filter_max_diff: 2.0

  icp_twist_median_filter: true
  icp_twist_filter_buffer_size: 20
  icp_twist_filter_max_valid: 5.0
  icp_twist_filter_max_diff: 2.0

  lidar_vel_median_filter: true
  lidar_vel_filter_buffer_size: 50
  lidar_vel_filter_max_valid: 8.0
  lidar_vel_filter_max_diff: 3.0

  hector_pos_median_filter: true
  hector_pos_filter_buffer_size: 50
  hector_pos_filter_max_valid: 8.0
  hector_pos_filter_max_diff: 3.0
  
  aloam_pos_median_filter: false
  aloam_pos_filter_buffer_size: 50
  aloam_pos_filter_max_valid: 8.0
  aloam_pos_filter_max_diff: 3.0

  brick_pos_median_filter: false
  brick_pos_filter_buffer_size: 50
  brick_pos_filter_max_valid: 8.0
  brick_pos_filter_max_diff: 3.0

  brick_timeout: 0.5 # [s] timeout until fallback from BRICK after loosing detections

  # Covariances of measurements
  Q:
    vel_optflow: [1]
    pos_mavros: [0.01]
    vel_mavros: [0.1]
    tilt_mavros: [100]
    pos_rtk: [10]
    vel_rtk: [1000]
    pos_lidar: [1000]
    vel_lidar: [10000]
    pos_vslam: [1]
    pos_vio: [0.1] #0.1
    vel_vio: [10] #10
    pos_object: [100]
    vel_object: [10000]
    pos_brick: [1000]
    vel_brick: [100]
    pos_hector: [1000]
    pos_aloam: [10]
    vel_icp: [1000]

  # The system matrix
  # pos, vel, acc, acc_in, acc_dist, tilt
  A: [1, 0.02, 0.0004, 0, 0, 0,
      0, 1, 0.02, 0, 0, 0,
      0, 0, 0, 1, 1, 0,
      0, 0, 0, 0, 0, 6.3512,
      0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0.9030]
  # no disturbance estimation
  # A: [1, 0.02, 0.0004, 0, 0, 0,
  #     0, 1, 0.02, 0, 0, 0,
  #     0, 0, 0, 1, 0, 0,
  #     0, 0, 0, 0, 0, 6.3512,
  #     0, 0, 0, 0, 0, 0,
  #     0, 0, 0, 0, 0, 0.9030]

  # The input matrix
  B: [0,
      0,
      0,
      0,
      0,
      0.0970]

  # Process covariance
  R: [0.1, 1, 0, 0, 0, 0,
      0, 0.1, 1000, 0, 0, 0,
      0, 0, 0, 0.0001, 0.0001, 0,
      0, 0, 0, 0, 0, 0.0001,
      0, 0, 0, 0, 0.1, 0,
      0, 0, 0, 0, 0, 1000]

  # RTK estimator must have a different model
  rtk:

    A: [1, 0,
        0, 1]

    B: [0.01, 0,
        0, 0.01]

    R: [0.01, 0,
        0, 0.01]

    Q: [10, 0,
        0, 10]

    P: [1, 0,
        0, 1]

heading:

  gyro_fallback: true

  numberOfVariables: 3
  numberOfInputs: 2
  numberOfMeasurements: 1

  optflow_yaw_rate_filter_buffer_size: 100
  optflow_yaw_rate_filter_max_valid: 3.0
  optflow_yaw_rate_filter_max_diff: 3.0

  icp_yaw_rate_filter_buffer_size: 100
  icp_yaw_rate_filter_max_valid: 3.0
  icp_yaw_rate_filter_max_diff: 2.0

  compass_yaw_filter_buffer_size: 100
  compass_yaw_filter_max_diff: deg(45)

  hector_yaw_median_filter: true
  hector_yaw_filter_buffer_size: 100
  hector_yaw_filter_max_diff: deg(10)
  
  aloam_yaw_median_filter: true
  aloam_yaw_filter_buffer_size: 100
  aloam_yaw_filter_max_diff: deg(10)

  vio_yaw_median_filter: true
  vio_yaw_filter_buffer_size: 100
  vio_yaw_filter_max_diff: deg(10)

  brick_yaw_median_filter: true
  brick_yaw_filter_buffer_size: 200
  brick_yaw_filter_max_diff: deg(10)
  max_brick_yaw_correction: deg(1)
  accum_yaw_brick_alpha: 0.1

  # The system matrix 
  A: [1, 0.02, 0,  # yaw
      0, 0.95, 1,     # yaw rate
      0, 0, 1]     # gyro bias

  # The input matrix (yaw rate or yaw + yaw rate?)
  B: [0, 0,
      0, 0.05,
      0, 0]

  # Process covariance
  R: [0.1, 0, 0,
      0, 0.1, 0.1,
      0, 0, 0.001]

  # Covariances of measurements
  Q:
    yaw_compass: [0.1]
    yaw_hector: [0.01]
    yaw_aloam: [0.1]
    yaw_brick: [10]
    yaw_vio: [100] #100
    yaw_vslam: [1]
    yaw_lidar: [1]
    rate_gyro: [0.1]
    rate_optflow: [10]
    rate_icp: [100]

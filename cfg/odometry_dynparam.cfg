#!/usr/bin/env python

PACKAGE='mrs_odometry'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();

pos_cov = gen.add_group("Lateral Position Measurement Covariances");

pos_cov.add("R_pos_mavros", double_t, 1, "Mavros position", 1, 0.00001, 100000000);
pos_cov.add("R_pos_vio", double_t, 2, "VIO position", 1, 0.00001, 100000000);
pos_cov.add("R_pos_vslam", double_t, 2, "VSLAM position", 1, 0.00001, 100000000);
pos_cov.add("R_pos_lidar", double_t, 4, "LIDAR position", 1, 0.00001, 100000000);
pos_cov.add("R_pos_rtk", double_t, 8, "RTK position", 1, 0.00001, 100000000);
pos_cov.add("R_pos_brick", double_t, 16, "Brick position", 1, 0.00001, 100000000);
pos_cov.add("R_pos_hector", double_t, 16, "Hector position", 1, 0.00001, 100000000);
pos_cov.add("R_pos_aloam", double_t, 16, "ALOAM position", 1, 0.00001, 100000000);

vel_cov = gen.add_group("Lateral Velocity Measurement Covariances");
vel_cov.add("R_vel_mavros", double_t, 32, "Mavros velocity", 1, 0.00001, 100000000);
vel_cov.add("R_vel_vio", double_t, 64, "VIO velocity", 1, 0.00001, 100000000);
vel_cov.add("R_vel_icp", double_t, 64, "ICP velocity", 1, 0.00001, 100000000);
vel_cov.add("R_vel_lidar", double_t, 128, "LIDAR velocity", 1, 0.00001, 100000000);
vel_cov.add("R_vel_optflow", double_t, 256, "Optflow velocity", 1, 0.00001, 100000000);
vel_cov.add("R_vel_rtk", double_t, 256, "RTK velocity", 1, 0.00001, 100000000);

ang_cov = gen.add_group("Lateral Angle Measurement Covariances");
ang_cov.add("R_tilt", double_t, 256, "Mavros tilt", 1, 0.00001, 100000000);

proc_cov = gen.add_group("Lateral Process Covariances");
proc_cov.add("Q_pos", double_t, 512, "Pose state", 1, 0.00001, 100000000);
proc_cov.add("Q_vel", double_t, 512, "Velocity state", 1, 0.00001, 100000000);
proc_cov.add("Q_acc", double_t, 1024, "Acceleration state", 1, 0.00001, 100000000);
proc_cov.add("Q_acc_d", double_t, 1024, "Disturbance Acceleration state", 1, 0.00001, 100000000);
proc_cov.add("Q_acc_i", double_t, 1024, "Input Acceleration state", 1, 0.00001, 100000000);
proc_cov.add("Q_tilt", double_t, 2048, "Tilt state", 1, 0.00001, 100000000);

yaw_cov = gen.add_group("Yaw Measurement Covariances");
yaw_cov.add("R_yaw_compass", double_t, 4096, "Compass yaw", 1, 0.00001, 100000000);
yaw_cov.add("R_yaw_hector", double_t, 4096, "Hector yaw", 1, 0.00001, 100000000);
yaw_cov.add("R_yaw_aloam", double_t, 4096, "ALOAM yaw", 1, 0.00001, 100000000);
yaw_cov.add("R_yaw_brick", double_t, 4096, "Brick yaw", 1, 0.00001, 100000000);
yaw_cov.add("R_yaw_vio", double_t, 4096, "VIO yaw", 1, 0.00001, 100000000);
yaw_cov.add("R_yaw_vslam", double_t, 4096, "VSLAM yaw", 1, 0.00001, 100000000);
yaw_cov.add("R_yaw_lidar", double_t, 4096, "LIDAR yaw", 1, 0.00001, 100000000);
yaw_cov.add("R_rate_gyro", double_t, 8192, "Gyro rate", 1, 0.00001, 100000000);
yaw_cov.add("R_rate_optflow", double_t, 8192, "Optflow rate", 1, 0.00001, 100000000);
yaw_cov.add("R_rate_icp", double_t, 8192, "ICP rate", 1, 0.00001, 100000000);

alt_cov = gen.add_group("Altitude Measurement Covariances");
alt_cov.add("R_height_range", double_t, 8192, "Rangefinder height", 1, 0.00001, 100000000);
alt_cov.add("R_height_plane", double_t, 8192, "Plane height", 1, 0.00001, 100000000);
alt_cov.add("R_height_brick", double_t, 8192, "Brick height", 1, 0.00001, 100000000);
alt_cov.add("R_height_vio", double_t, 8192, "VIO height", 1, 0.00001, 100000000);
alt_cov.add("R_height_aloam", double_t, 8192, "ALOAM height", 1, 0.00001, 100000000);
alt_cov.add("R_height_baro", double_t, 8192, "BARO height", 1, 0.00001, 100000000);
alt_cov.add("R_vel_baro", double_t, 8192, "Barometric velocity", 1, 0.00001, 100000000);
alt_cov.add("R_acc_imu", double_t, 16384, "IMU accelerations", 1, 0.00001, 100000000);

exit(gen.generate(PACKAGE, "mrs_odometry", "odometry_dynparam"))


